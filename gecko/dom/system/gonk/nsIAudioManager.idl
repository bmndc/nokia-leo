/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

[scriptable, builtinclass, uuid(1e14fa20-61d8-11e5-b0e4-87f6222bf81c)]
interface nsIAudioManager : nsISupports
{
  /**
   * Microphone muted?
   */
  attribute boolean microphoneMuted;

  /**
   * Are we playing audio from the FM radio?
   */
  attribute boolean fmRadioAudioEnabled;

  /**
   * Set the phone's audio mode.
   */
  const long PHONE_STATE_INVALID          = -2;
  const long PHONE_STATE_CURRENT          = -1;
  const long PHONE_STATE_NORMAL           = 0;
  const long PHONE_STATE_RINGTONE         = 1;
  const long PHONE_STATE_IN_CALL          = 2;
  const long PHONE_STATE_IN_COMMUNICATION = 3;

  attribute long phoneState;

  /**
   * The state of wired headset.
   */
  const long HEADSET_STATE_UNKNOWN = -1;
  const long HEADSET_STATE_OFF = 0;
  const long HEADSET_STATE_HEADSET = 1;
  const long HEADSET_STATE_HEADPHONE = 2;

  readonly attribute long headsetState;

  /**
   * Apply specified TTY mode to Audio System.
   *
   * TTY(teletypewriter) is an external commnunication accessary for the
   * deaf-blind, where
   * "OFF"  - indicating TTY mode is disabled.
   * "FULL" - indicating both hearing carryover and voice carryover are enabled.
   * "HCO"  - indicating hearing carryover is enabled.
   * "VCO"  - indicating voice carryover is enabled.
   */
  const unsigned short TTY_MODE_OFF = 0;
  const unsigned short TTY_MODE_FULL = 1;
  const unsigned short TTY_MODE_HCO = 2;
  const unsigned short TTY_MODE_VCO = 3;

  void setTtyMode(in unsigned short aTtyMode);

  /**
   * Configure a particular device ("force") to be used for one of the uses
   * (communication, media playback, etc.)
   */
  const long FORCE_NONE            = 0; // the default
  const long FORCE_SPEAKER         = 1;
  const long FORCE_HEADPHONES      = 2;
  const long FORCE_BT_SCO          = 3;
  const long FORCE_BT_A2DP         = 4;
  const long FORCE_WIRED_ACCESSORY = 5;
  const long FORCE_BT_CAR_DOCK     = 6;
  const long FORCE_BT_DESK_DOCK    = 7;
  const long FORCE_ANALOG_DOCK     = 8;
  const long FORCE_DIGITAL_DOCK    = 9;
  const long FORCE_NO_BT_A2DP      = 10;
  const long USE_COMMUNICATION     = 0;
  const long USE_MEDIA             = 1;
  const long USE_RECORD            = 2;
  const long USE_DOCK              = 3;

  void setForceForUse(in long usage, in long force);
  long getForceForUse(in long usage);

  /**
   * These functions would be used when we enable the new volume control API
   * (mozAudioChannelManager). The range of volume index is from 0 to N.
   * More details on : https://gist.github.com/evanxd/41d8e2d91c5201a42bfa
   */
  void setAudioChannelVolume(in unsigned long channel, in unsigned long index);
  unsigned long getAudioChannelVolume(in unsigned long channel);
  unsigned long getMaxAudioChannelVolume(in unsigned long channel);

  void setHacMode(in boolean hacMode);

  void setMicMode(in unsigned short  micMode);
};
