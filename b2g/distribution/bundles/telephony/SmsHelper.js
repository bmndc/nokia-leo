// Copyright (c) 2012-2016 Qualcomm Technologies, Inc. All Rights Reserved. Confidential and Proprietary - Qualcomm Technologies, Inc.
'use strict';const{classes:Cc,interfaces:Ci,utils:Cu,results:Cr}=Components;Cu.import('resource://gre/modules/XPCOMUtils.jsm');Cu.import('resource://gre/modules/Services.jsm');Cu.import('resource://gre/modules/PhoneNumberUtils.jsm');Cu.import('resource://gre/modules/CustomizationConfigManager.jsm');const DEBUG=true;const SMS_HELPER_CID=Components.ID('{F69F4E4A-9858-48D7-8667-65FCF59206CB}');XPCOMUtils.defineLazyServiceGetter(this,'gMobileMessageService','@mozilla.org/mobilemessage/mobilemessageservice;1','nsIMobileMessageService');XPCOMUtils.defineLazyServiceGetter(this,'gSystemMessenger','@mozilla.org/system-message-internal;1','nsISystemMessagesInternal');XPCOMUtils.defineLazyServiceGetter(this,'gMessageDBService','@mozilla.org/mobilemessage/gonkmobilemessagedatabaseservice;1','nsIGonkMobileMessageDatabaseService');XPCOMUtils.defineLazyGetter(this,'WAP',function(){let WAP={};Cu.import('resource://gre/modules/WapPushManager.js',WAP);return WAP;});const kVzwDirectSmsTopic='direct-sms-received';function SmsHelper(){debug('Starting SmsHelper');}
SmsHelper.prototype={classID:SMS_HELPER_CID,classInfo:XPCOMUtils.generateCI({classID:SMS_HELPER_CID,classDescription:'SmsHelper',interfaces:[Ci.nsISmsHelper]}),QueryInterface:XPCOMUtils.generateQI([Ci.nsISmsHelper]),createSmsMessage:function createSmsMessage(aId,aThreadId,aIccId,aDelivery,aDeliveryStatus,aSender,aReceiver,aBody,aMessageClass,aSentTimestamp,aRead){return gMobileMessageService.createSmsMessage(aId,aThreadId,aIccId,aDelivery,aDeliveryStatus,aSender,aReceiver,aBody,aMessageClass,Date.now(),aSentTimestamp,0,aRead);},normalizeNumber:function normalizeNumber(number){return PhoneNumberUtils.normalize(number.toString());},saveMessageToDatabase:function saveMessageToDatabase(sending,iccId,type,messageClass,sender,receiver,body,deliveryStatusRequested,pid,sentTimestamp,callback){let message={iccId:iccId,type:type,messageClass:messageClass,sender:sender,receiver:receiver,body:body,deliveryStatusRequested:deliveryStatusRequested,pid:pid,sentTimestamp:sentTimestamp,timestamp:Date.now()};if(sending){gMessageDBService.saveSendingMessage(message,callback);}else{gMessageDBService.saveReceivedMessage(message,callback);}},saveMsgCustomToDatabase:function saveMsgCustomToDatabase(sending,iccId,type,messageClass,sender,receiver,body,deliveryStatusRequested,pid,year,month,day,hour,minute,second,callback){dump("messageClass = "+messageClass+"sender = "+sender+"sending = "+sending);dump("receiver = "+receiver+"body = "+body+"deliveryStatusRequested = "+deliveryStatusRequested);CustomizationConfigManager.getValue("sms.local.time").then((result)=>{dump(`sms.local.time ${JSON.stringify(result)}`);var isLocalTime=(JSON.stringify(result)==undefined)?true:result;var time=isLocalTime?Date.now():new Date(year,month,day,hour,minute,second).getTime();let message={iccId:iccId,type:type,messageClass:messageClass,sender:sender,receiver:receiver,body:body,deliveryStatusRequested:deliveryStatusRequested,pid:pid,timestamp:time};if(sending){gMessageDBService.saveSendingMessage(message,callback);}else{gMessageDBService.saveReceivedMessage(message,callback);}});},sendMessageToWapPushService:function sendMessageToWapPushService(sender,receiver,fullData,dataLen,sourcePort,destPort,clientId){let options={bearer:WAP.WDP_BEARER_GSM_SMS_GSM_MSISDN,sourceAddress:sender,sourcePort:sourcePort,destinationAddress:receiver,destinationPort:destPort,serviceId:clientId};let binaryData=new Uint8Array(fullData);WAP.WapPushManager.receiveWdpPDU(binaryData,dataLen,0,options);},sendMsgToDestinationPort:function sendMsgToDestinationPort(sender,receiver,fullData,dataLen,sourcePort,destPort,clientId){try{let content='';for(let i=0;i<dataLen;i++){content+=String.fromCharCode(fullData[i]);}
let options={content:content,sourceAddress:sender,sourcePort:sourcePort,destinationAddress:receiver,destinationPort:destPort,serviceId:clientId};gSystemMessenger.broadcastMessage(kVzwDirectSmsTopic,options);}catch(e){dump('Failed to broadcastMsg : '+e);}},saveSmsSegment:function saveSmsSegment(aSender,aSegmentRef,aSegmentMaxSeq,aSegmentSeq,aIccId,aEncoding,aOriginatorPort,aDestinationPort,aBody,aBinaryData,aBinaryDatalength,aCallback){let binaryData=new Uint8Array(aBinaryData);let segment={sender:aSender,segmentRef:aSegmentRef,segmentMaxSeq:aSegmentMaxSeq,segmentSeq:aSegmentSeq,iccId:aIccId,encoding:aEncoding,originatorPort:aOriginatorPort,destinationPort:aDestinationPort,body:aBody,data:binaryData,timestamp:Date.now()};gMessageDBService.saveSmsSegment(segment,function(aRv,aCompleteMessage){let completeMessage;if(aCompleteMessage){if(aCompleteMessage.fullData==undefined){aCompleteMessage.fullData=new Uint8Array(0);}
completeMessage=aCompleteMessage;}else{completeMessage={originatorPort:-1,destinationPort:-1,fullBody:'',fullData:new Uint8Array(0)};}
aCallback.notify(aRv,completeMessage.originatorPort,completeMessage.destinationPort,completeMessage.fullBody,completeMessage.fullData,completeMessage.fullData.length);});},translateCrErrorToMessageCallbackError:function translateCrErrorToMessageCallbackError(aRv,aCbError){aCbError.value=gMessageDBService.translateCrErrorToMessageCallbackError(aRv);}};this.NSGetFactory=XPCOMUtils.generateNSGetFactory([SmsHelper]);let debug;if(DEBUG){debug=function(s){dump('-*- SMSHELPER: '+s+'\n');};}else{debug=function(s){};}