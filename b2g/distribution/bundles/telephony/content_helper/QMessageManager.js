// Copyright (c) 2012-2016 Qualcomm Technologies, Inc. All Rights Reserved. Confidential and Proprietary - Qualcomm Technologies, Inc.
'use strict';const{classes:Cc,interfaces:Ci,utils:Cu,results:Cr}=Components;Cu.import('resource://gre/modules/XPCOMUtils.jsm');Cu.import('resource://gre/modules/Services.jsm');Cu.import('resource://gre/modules/systemlibs.js');Cu.import('resource://qcommon/QCommon.js',this);const log=new LogUtils('QMESSAGE_MANAGER');const QMESSAGE_MANAGER_CID=Components.ID('{1D21C3F4-3D05-11E3-AD14-A3306288709B}');const kSysMsgListenerReadyObserverTopic='system-message-listener-ready';const kXPComShutdownObserverTopic='xpcom-shutdown';const RIL_IPC_ICCMANAGER_MSG_NAMES=['RIL:GetRilContext','RIL:SendStkResponse','RIL:SendStkMenuSelection','RIL:SendStkTimerExpiration','RIL:SendStkEventDownload','RIL:GetCardLockEnabled','RIL:UnlockCardLock','RIL:SetCardLockEnabled','RIL:ChangeCardLockPassword','RIL:GetCardLockRetryCount','RIL:IccOpenChannel','RIL:IccExchangeAPDU','RIL:IccCloseChannel','RIL:ReadIccContacts','RIL:UpdateIccContact','RIL:RegisterIccMsg','RIL:MatchMvno','RIL:GetServiceState'];XPCOMUtils.defineLazyServiceGetter(this,'ppmm','@mozilla.org/parentprocessmessagemanager;1','nsIMessageBroadcaster');function QMessageManager(){log.debug('Starting QMessage Manager');this.numRadioInterfaces=1;this.sysMsgListenerReady=false;this.messageManagerByTopic={};this.topicList=[];this.targetMessageQueue=[];this.clientMsgHandlers=[];}
QMessageManager.prototype={classID:QMESSAGE_MANAGER_CID,classInfo:XPCOMUtils.generateCI({classID:QMESSAGE_MANAGER_CID,classDescription:'QMessageManager',interfaces:[Ci.nsIQMessageManager]}),QueryInterface:XPCOMUtils.generateQI([Ci.nsIQMessageManager,Ci.nsIMessageListener,Ci.nsIObserver]),init:function init(ril,numRadioInterfaces){log.debug('Init');this.ril=ril;this.numRadioInterfaces=numRadioInterfaces;this.registerMessageListeners();Services.obs.addObserver(this,kXPComShutdownObserverTopic,false);Services.obs.addObserver(this,kSysMsgListenerReadyObserverTopic,false);},registerMessageHandler:function registerMessageHandler(handler,clientId){if(clientId>=this.numRadioInterfaces){log.debug('invalid client id '+clientId);return;}
this.clientMsgHandlers[clientId]=handler;},shutdown:function shutdown(){Services.obs.removeObserver(this,kXPComShutdownObserverTopic);this.unregisterMessageListeners();},registerMessageListeners:function registerMessageListeners(){ppmm.addMessageListener('child-process-shutdown',this);for(let msgName of RIL_IPC_ICCMANAGER_MSG_NAMES){ppmm.addMessageListener(msgName,this);}},unregisterMessageListeners:function unregisterMessageListeners(){ppmm.removeMessageListener('child-process-shutdown',this);for(let msgName of RIL_IPC_ICCMANAGER_MSG_NAMES){ppmm.removeMessageListener(msgName,this);}
ppmm=null;},registerMessageTarget:function registerMessageTarget(topic,target){let targets=this.messageManagerByTopic[topic];if(!targets){targets=this.messageManagerByTopic[topic]=[];let list=this.topicList;if(list.indexOf(topic)==-1){list.push(topic);}}
if(targets.indexOf(target)!=-1){log.debug('Already registered this target!');return;}
targets.push(target);log.debug('Registered '+topic+' target: '+target);},unregisterMessageTarget:function unregisterMessageTarget(topic,target){if(topic==null){for(let type of this.topicList){this.unregisterMessageTarget(type,target);}
return;}
let targets=this.messageManagerByTopic[topic];if(!targets){return;}
let index=targets.indexOf(target);if(index!=-1){targets.splice(index,1);log.debug('Unregistered '+topic+' target: '+target);}},sendTargetMessage:function sendTargetMessage(topic,message,options){if(!this.sysMsgListenerReady){this.enqueueTargetMessage(topic,message,options);return;}
let targets=this.messageManagerByTopic[topic];if(!targets){return;}
for each(let target in targets){target.sendAsyncMessage(message,options);}},enqueueTargetMessage:function enqueueTargetMessage(topic,message,options){log.debug('Enqueue message '+message+' for sub '+
options.clientId);let msg={topic:topic,message:message,options:options};let clientId=options.clientId||0;if(!this.targetMessageQueue[clientId]){this.targetMessageQueue[clientId]=[];}
let messageQueue=this.targetMessageQueue[clientId];for(let i=0;i<messageQueue.length;i++){if(messageQueue[i].message===message){messageQueue.splice(i,1);break;}}
messageQueue.push(msg);},resendQueuedTargetMessage:function resendQueuedTargetMessage(){for each(let subQueue in this.targetMessageQueue){for each(let msg in subQueue){this.sendTargetMessage(msg.topic,msg.message,msg.options);}}
this.targetMessageQueue=null;},receiveMessage:function receiveMessage(msg){if(msg.name=='child-process-shutdown'){this.unregisterMessageTarget(null,msg.target);return null;}
if(!assertPermissions(msg)){return null;}
if(msg.name==='RIL:RegisterIccMsg'){this.registerMessageTarget('icc',msg.target);return null;}
let clientId=msg.json.clientId||0;if(!this.clientMsgHandlers[clientId]){log.debug('No such radio interface: '+clientId);return null;}
return this.clientMsgHandlers[clientId].receiveMessage(msg);},observe:function nsIObserver_observe(subject,topic,data){switch(topic){case kXPComShutdownObserverTopic:log.debug('Received xpcom-shutdown');ppmm.removeMessageListener('child-process-shutdown',this);this.shutdown();break;case kSysMsgListenerReadyObserverTopic:log.debug('system message listener is now ready');Services.obs.removeObserver(this,kSysMsgListenerReadyObserverTopic);this.sysMsgListenerReady=true;this.resendQueuedTargetMessage();break;}}};function assertPermissions(msg){if(RIL_IPC_ICCMANAGER_MSG_NAMES.indexOf(msg.name)!=-1){if(!msg.target.assertPermission('mobileconnection')){log.debug('IccManager message '+msg.name+' from a content process with no mobileconnection privileges.');return false;}}else{log.debug('Ignoring unknown message type: '+msg.name);return false;}
return true;}
this.NSGetFactory=XPCOMUtils.generateNSGetFactory([QMessageManager]);