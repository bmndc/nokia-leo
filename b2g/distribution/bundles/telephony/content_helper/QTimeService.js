// Copyright (c) 2012-2016 Qualcomm Technologies, Inc. All Rights Reserved. Confidential and Proprietary - Qualcomm Technologies, Inc.
'use strict';const{classes:Cc,interfaces:Ci,utils:Cu,results:Cr}=Components;Cu.import('resource://gre/modules/XPCOMUtils.jsm');Cu.import('resource://gre/modules/Services.jsm');Cu.import('resource://gre/modules/Sntp.jsm');Cu.import('resource://gre/modules/systemlibs.js');Cu.import('resource://qcommon/QCommon.js',this);const log=new LogUtils('QTIME_SERVICE');const QTIME_SERVICE_CID=Components.ID('{B5823794-683B-11E3-BF68-AA096288709B}');const kClockAutoUpdateEnabled='time.clock.automatic-update.enabled';const kClockAutoUpdateAvailable='time.clock.automatic-update.available';const kNetworkConnStateChangedTopic='network-connection-state-changed';const kTimezoneAutoUpdateEnabled='time.timezone.automatic-update.enabled';const kTimezoneAutoUpdateAvailable='time.timezone.automatic-update.available';const kSysMsgListenerReadyObserverTopic='system-message-listener-ready';const kSysClockChangedObserverTopic='system-clock-change';const kXPComShutdownObserverTopic='xpcom-shutdown';const kSettingsChangedObserverTopic='mozsettings-changed';XPCOMUtils.defineLazyServiceGetter(this,'gTimeService','@mozilla.org/time/timeservice;1','nsITimeService');XPCOMUtils.defineLazyServiceGetter(this,'gSettingsService','@mozilla.org/settingsService;1','nsISettingsService');XPCOMUtils.defineLazyServiceGetter(this,'gNetworkManager','@mozilla.org/network/manager;1','nsINetworkManager');function QTimeService(){log.debug('Starting QTime Service');this.sysMsgListenerReady=false;this.clockAutoUpdateEnabled=null;this.timezoneAutoUpdateEnabled=null;this.automaticTimePending=false;let lock=gSettingsService.createLock();lock.get(kClockAutoUpdateEnabled,this);lock.get(kTimezoneAutoUpdateEnabled,this);this.setClockAutoUpdateAvailable(false);this.setTimezoneAutoUpdateAvailable(false);Services.obs.addObserver(this,kNetworkConnStateChangedTopic,false);Services.obs.addObserver(this,kXPComShutdownObserverTopic,false);Services.obs.addObserver(this,kSysClockChangedObserverTopic,false);Services.obs.addObserver(this,kSettingsChangedObserverTopic,false);Services.obs.addObserver(this,kSysMsgListenerReadyObserverTopic,false);this._sntp=new Sntp(this.setClockBySntp.bind(this),Services.prefs.getIntPref('network.sntp.maxRetryCount'),Services.prefs.getIntPref('network.sntp.refreshPeriod'),Services.prefs.getIntPref('network.sntp.timeout'),Services.prefs.getCharPref('network.sntp.pools').split(';'),Services.prefs.getIntPref('network.sntp.port'));}
QTimeService.prototype={classID:QTIME_SERVICE_CID,classInfo:XPCOMUtils.generateCI({classID:QTIME_SERVICE_CID,classDescription:'QTimeService',interfaces:[Ci.nsIQTimeService]}),QueryInterface:XPCOMUtils.generateQI([Ci.nsIQTimeService,Ci.nsIObserver,Ci.nsISettingsServiceCallback]),observe:function nsIObserver_observe(subject,topic,data){switch(topic){case kXPComShutdownObserverTopic:try{Services.obs.removeObserver(this,kNetworkConnStateChangedTopic);Services.obs.removeObserver(this,kXPComShutdownObserverTopic);Services.obs.removeObserver(this,kSysClockChangedObserverTopic);Services.obs.removeObserver(this,kSettingsChangedObserverTopic);Services.obs.removeObserver(this,kSysMsgListenerReadyObserverTopic);}catch(e){}
break;case kSysMsgListenerReadyObserverTopic:log.debug('system message listener is now ready');Services.obs.removeObserver(this,kSysMsgListenerReadyObserverTopic);this.sysMsgListenerReady=true;if(this.automaticTimePending){this.applyAutomaticTime();}
break;case kSysClockChangedObserverTopic:var deltaMs=parseInt(data,10);if(this.nitz){this.nitzOffsetMs+=deltaMs;}
if(this.ntpTime){this.ntpOffsetMs+=deltaMs;}
this._sntp.updateOffset(deltaMs);break;case kSettingsChangedObserverTopic:if('wrappedJSObject'in subject){subject=subject.wrappedJSObject;}
this.handle(subject.key,subject.value,subject.isInternalChange);break;case kNetworkConnStateChangedTopic:let network=subject.QueryInterface(Ci.nsINetworkInfo);if(network.state!==Ci.nsINetworkInfo.NETWORK_STATE_CONNECTED){return;}
if(network.type!==Ci.nsINetworkInfo.NETWORK_TYPE_WIFI&&network.type!==Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE){return;}
if(this._sntp.isExpired()){this._sntp.request();}
break;}},handle:function nsISettingsServiceCallback_handle(aName,aResult,aIsInternalSetting){switch(aName){case kClockAutoUpdateEnabled:this.clockAutoUpdateEnabled=aResult;this.applyAutomaticTime();break;case kTimezoneAutoUpdateEnabled:this.timezoneAutoUpdateEnabled=aResult;this.applyAutomaticTime();break;case kClockAutoUpdateAvailable:let isClockAutoUpdateAvailable=((this.nitz!==null)||(this.ntpTime!==null));if(!aIsInternalSetting&&(aResult!==isClockAutoUpdateAvailable)){log.debug('Content processes cannot modify '+"'time.clock.automatic-update.available'. Restore!");this.setClockAutoUpdateAvailable(isClockAutoUpdateAvailable);}
break;case kTimezoneAutoUpdateAvailable:let isTimezoneAutoUpdateAvailable=(this.nitz!==null);if(!aIsInternalSetting&&(aResult!==isTimezoneAutoUpdateAvailable)){log.debug('Content processes cannot modify '+"'time.timezone.automatic-update.available'. Restore!");this.setTimezoneAutoUpdateAvailable(isTimezoneAutoUpdateAvailable);}
break;}},handleError:function nsISettingsServiceCallback_handleError(aErrorMessage){log.debug('Error while reading RIL setting:'+aErrorMessage);},setClockAutoUpdateAvailable:function setClockAutoUpdateAvailable(value){gSettingsService.createLock().set(kClockAutoUpdateAvailable,value,null);},setTimezoneAutoUpdateAvailable:function setTimezoneAutoUpdateAvailable(value){gSettingsService.createLock().set(kTimezoneAutoUpdateAvailable,value,null);},applyNitz:function applyNitz(aNitz,aDelayMs){this.nitzOffsetMs=Date.now()+aDelayMs;this.nitz=aNitz;this.setClockAutoUpdateAvailable(true);this.setTimezoneAutoUpdateAvailable(true);this.applyAutomaticTime();},applyNtpTime:function applyNtpTime(aNtpTime){this.ntpOffsetMs=Date.now();this.ntpTime=aNtpTime;this.setClockAutoUpdateAvailable(true);this.applyAutomaticTime();},applyAutomaticTime:function applyAutomaticTime(){if(!this.sysMsgListenerReady){this.automaticTimePending=true;return;}
if(this.clockAutoUpdateEnabled){if(this.setNitzTime()==false){this._requestNtpTime();}}
if(this.timezoneAutoUpdateEnabled){this.setNitzTimeZone();}},setNitzTime:function setNitzTime(){if(!this.nitz||!this.nitzOffsetMs){log.debug('NITZ not available');return false;}
log.debug('Applying NITZ: '+this.nitz+' delay='+
(Date.now()-this.nitzOffsetMs));let nitz=this.nitz;let year=parseInt(nitz.substr(0,2),10);let month=parseInt(nitz.substr(3,2),10);let day=parseInt(nitz.substr(6,2),10);let hours=parseInt(nitz.substr(9,2),10);let minutes=parseInt(nitz.substr(12,2),10);let seconds=parseInt(nitz.substr(15,2),10);let timeInMS=Date.UTC(year+2000,month-1,day,hours,minutes,seconds);if(isNaN(timeInMS)){log.debug('NITZ failed to convert; invalid NITZ time');return false;}
gTimeService.set(timeInMS+(Date.now()-this.nitzOffsetMs));return true;},setNitzTimeZone:function setNitzTimeZone(){if(!this.nitz){log.debug('NITZ not available');return false;}
let nitz=this.nitz;let tz=parseInt(nitz.substr(17,3),10);let dst=(nitz.length>21)?parseInt(nitz.substr(21,2),10):0;gSettingsService.createLock().set('time.timezone.dst',dst,null);let networkTimeZoneInMinutes=-(tz*15);if(networkTimeZoneInMinutes!=(new Date()).getTimezoneOffset()){let absTimeZoneInMinutes=Math.abs(networkTimeZoneInMinutes);let timeZoneStr='UTC';timeZoneStr+=(networkTimeZoneInMinutes>=0?'-':'+');timeZoneStr+=('0'+Math.floor(absTimeZoneInMinutes/60)).slice(-2);timeZoneStr+=':';timeZoneStr+=('0'+absTimeZoneInMinutes%60).slice(-2);gSettingsService.createLock().set('time.timezone',timeZoneStr,null);}
return true;},_requestNtpTime:function(){if(gNetworkManager.activeNetworkInfo&&gNetworkManager.activeNetworkInfo.state==Ci.nsINetworkInfo.NETWORK_STATE_CONNECTED){if(!this._sntp.isExpired()){this.setClockBySntp(this._sntp.getOffset());}else{this._sntp.request();}}},setClockBySntp:function(offset){this.setClockAutoUpdateAvailable(true);if(!this.clockAutoUpdateEnabled){return;}
if(this.nitz){log.debug('SNTP: NITZ available, discard SNTP');return;}
this.setTimezoneAutoUpdateAvailable(false);gTimeService.set(Date.now()+offset);},setNtpTime:function setNtpTime(){if(!this.ntpTime){log.debug('Invalid NTP time');return;}
var delay=Date.now()-this.ntpOffsetMs;log.debug('Applying NTP Time: '+this.ntpTime+' delay='+delay);gTimeService.set(this.ntpTime+delay);},getCurrentTimestamp:function getCurrentTimestamp(){return Date.now();},getTimestamp:function getTimestamp(year,month,day,hour,minute,second,tzOffset){let timestamp=Date.UTC(year,month,day,hour,minute,second);timestamp-=tzOffset;return timestamp;}};this.NSGetFactory=XPCOMUtils.generateNSGetFactory([QTimeService]);